/*
Garage Administration API v0+garage-v0.9.0

Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.  *Disclaimer: The API is not stable yet, hence its v0 tag. The API can change at any time, and changes can include breaking backward compatibility. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is very early stage and can contain bugs, especially on error return codes/types that are not tested yet. Do not expect a well finished and polished product!* 

API version: v0.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package garage

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AllowBucketKeyRequestPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowBucketKeyRequestPermissions{}

// AllowBucketKeyRequestPermissions struct for AllowBucketKeyRequestPermissions
type AllowBucketKeyRequestPermissions struct {
	Read bool `json:"read"`
	Write bool `json:"write"`
	Owner bool `json:"owner"`
}

type _AllowBucketKeyRequestPermissions AllowBucketKeyRequestPermissions

// NewAllowBucketKeyRequestPermissions instantiates a new AllowBucketKeyRequestPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowBucketKeyRequestPermissions(read bool, write bool, owner bool) *AllowBucketKeyRequestPermissions {
	this := AllowBucketKeyRequestPermissions{}
	this.Read = read
	this.Write = write
	this.Owner = owner
	return &this
}

// NewAllowBucketKeyRequestPermissionsWithDefaults instantiates a new AllowBucketKeyRequestPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowBucketKeyRequestPermissionsWithDefaults() *AllowBucketKeyRequestPermissions {
	this := AllowBucketKeyRequestPermissions{}
	return &this
}

// GetRead returns the Read field value
func (o *AllowBucketKeyRequestPermissions) GetRead() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Read
}

// GetReadOk returns a tuple with the Read field value
// and a boolean to check if the value has been set.
func (o *AllowBucketKeyRequestPermissions) GetReadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Read, true
}

// SetRead sets field value
func (o *AllowBucketKeyRequestPermissions) SetRead(v bool) {
	o.Read = v
}

// GetWrite returns the Write field value
func (o *AllowBucketKeyRequestPermissions) GetWrite() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Write
}

// GetWriteOk returns a tuple with the Write field value
// and a boolean to check if the value has been set.
func (o *AllowBucketKeyRequestPermissions) GetWriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Write, true
}

// SetWrite sets field value
func (o *AllowBucketKeyRequestPermissions) SetWrite(v bool) {
	o.Write = v
}

// GetOwner returns the Owner field value
func (o *AllowBucketKeyRequestPermissions) GetOwner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *AllowBucketKeyRequestPermissions) GetOwnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *AllowBucketKeyRequestPermissions) SetOwner(v bool) {
	o.Owner = v
}

func (o AllowBucketKeyRequestPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowBucketKeyRequestPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["read"] = o.Read
	toSerialize["write"] = o.Write
	toSerialize["owner"] = o.Owner
	return toSerialize, nil
}

func (o *AllowBucketKeyRequestPermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"read",
		"write",
		"owner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAllowBucketKeyRequestPermissions := _AllowBucketKeyRequestPermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAllowBucketKeyRequestPermissions)

	if err != nil {
		return err
	}

	*o = AllowBucketKeyRequestPermissions(varAllowBucketKeyRequestPermissions)

	return err
}

type NullableAllowBucketKeyRequestPermissions struct {
	value *AllowBucketKeyRequestPermissions
	isSet bool
}

func (v NullableAllowBucketKeyRequestPermissions) Get() *AllowBucketKeyRequestPermissions {
	return v.value
}

func (v *NullableAllowBucketKeyRequestPermissions) Set(val *AllowBucketKeyRequestPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowBucketKeyRequestPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowBucketKeyRequestPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowBucketKeyRequestPermissions(val *AllowBucketKeyRequestPermissions) *NullableAllowBucketKeyRequestPermissions {
	return &NullableAllowBucketKeyRequestPermissions{value: val, isSet: true}
}

func (v NullableAllowBucketKeyRequestPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowBucketKeyRequestPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


