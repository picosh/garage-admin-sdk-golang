/*
Garage Administration API v0+garage-v0.9.0

Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.  *Disclaimer: The API is not stable yet, hence its v0 tag. The API can change at any time, and changes can include breaking backward compatibility. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is very early stage and can contain bugs, especially on error return codes/types that are not tested yet. Do not expect a well finished and polished product!* 

API version: v0.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package garage

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterLayout type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterLayout{}

// ClusterLayout struct for ClusterLayout
type ClusterLayout struct {
	Version int32 `json:"version"`
	Roles []NodeClusterInfo `json:"roles"`
	StagedRoleChanges []NodeRoleChange `json:"stagedRoleChanges"`
}

type _ClusterLayout ClusterLayout

// NewClusterLayout instantiates a new ClusterLayout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterLayout(version int32, roles []NodeClusterInfo, stagedRoleChanges []NodeRoleChange) *ClusterLayout {
	this := ClusterLayout{}
	this.Version = version
	this.Roles = roles
	this.StagedRoleChanges = stagedRoleChanges
	return &this
}

// NewClusterLayoutWithDefaults instantiates a new ClusterLayout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterLayoutWithDefaults() *ClusterLayout {
	this := ClusterLayout{}
	return &this
}

// GetVersion returns the Version field value
func (o *ClusterLayout) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ClusterLayout) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ClusterLayout) SetVersion(v int32) {
	o.Version = v
}

// GetRoles returns the Roles field value
func (o *ClusterLayout) GetRoles() []NodeClusterInfo {
	if o == nil {
		var ret []NodeClusterInfo
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *ClusterLayout) GetRolesOk() ([]NodeClusterInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *ClusterLayout) SetRoles(v []NodeClusterInfo) {
	o.Roles = v
}

// GetStagedRoleChanges returns the StagedRoleChanges field value
func (o *ClusterLayout) GetStagedRoleChanges() []NodeRoleChange {
	if o == nil {
		var ret []NodeRoleChange
		return ret
	}

	return o.StagedRoleChanges
}

// GetStagedRoleChangesOk returns a tuple with the StagedRoleChanges field value
// and a boolean to check if the value has been set.
func (o *ClusterLayout) GetStagedRoleChangesOk() ([]NodeRoleChange, bool) {
	if o == nil {
		return nil, false
	}
	return o.StagedRoleChanges, true
}

// SetStagedRoleChanges sets field value
func (o *ClusterLayout) SetStagedRoleChanges(v []NodeRoleChange) {
	o.StagedRoleChanges = v
}

func (o ClusterLayout) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterLayout) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["roles"] = o.Roles
	toSerialize["stagedRoleChanges"] = o.StagedRoleChanges
	return toSerialize, nil
}

func (o *ClusterLayout) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"roles",
		"stagedRoleChanges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterLayout := _ClusterLayout{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterLayout)

	if err != nil {
		return err
	}

	*o = ClusterLayout(varClusterLayout)

	return err
}

type NullableClusterLayout struct {
	value *ClusterLayout
	isSet bool
}

func (v NullableClusterLayout) Get() *ClusterLayout {
	return v.value
}

func (v *NullableClusterLayout) Set(val *ClusterLayout) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterLayout) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterLayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterLayout(val *ClusterLayout) *NullableClusterLayout {
	return &NullableClusterLayout{value: val, isSet: true}
}

func (v NullableClusterLayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterLayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


