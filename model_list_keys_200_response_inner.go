/*
Garage Administration API v0+garage-v0.9.0

Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.  *Disclaimer: The API is not stable yet, hence its v0 tag. The API can change at any time, and changes can include breaking backward compatibility. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is very early stage and can contain bugs, especially on error return codes/types that are not tested yet. Do not expect a well finished and polished product!* 

API version: v0.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package garage

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListKeys200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListKeys200ResponseInner{}

// ListKeys200ResponseInner struct for ListKeys200ResponseInner
type ListKeys200ResponseInner struct {
	Id string `json:"id"`
	Name *string `json:"name,omitempty"`
}

type _ListKeys200ResponseInner ListKeys200ResponseInner

// NewListKeys200ResponseInner instantiates a new ListKeys200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListKeys200ResponseInner(id string) *ListKeys200ResponseInner {
	this := ListKeys200ResponseInner{}
	this.Id = id
	return &this
}

// NewListKeys200ResponseInnerWithDefaults instantiates a new ListKeys200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListKeys200ResponseInnerWithDefaults() *ListKeys200ResponseInner {
	this := ListKeys200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *ListKeys200ResponseInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ListKeys200ResponseInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ListKeys200ResponseInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListKeys200ResponseInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListKeys200ResponseInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListKeys200ResponseInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListKeys200ResponseInner) SetName(v string) {
	o.Name = &v
}

func (o ListKeys200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListKeys200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *ListKeys200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListKeys200ResponseInner := _ListKeys200ResponseInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListKeys200ResponseInner)

	if err != nil {
		return err
	}

	*o = ListKeys200ResponseInner(varListKeys200ResponseInner)

	return err
}

type NullableListKeys200ResponseInner struct {
	value *ListKeys200ResponseInner
	isSet bool
}

func (v NullableListKeys200ResponseInner) Get() *ListKeys200ResponseInner {
	return v.value
}

func (v *NullableListKeys200ResponseInner) Set(val *ListKeys200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListKeys200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListKeys200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListKeys200ResponseInner(val *ListKeys200ResponseInner) *NullableListKeys200ResponseInner {
	return &NullableListKeys200ResponseInner{value: val, isSet: true}
}

func (v NullableListKeys200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListKeys200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


